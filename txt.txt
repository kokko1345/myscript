local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Kokko hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]
local Tab = Window:MakeTab({
	Name = "Tools",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local Section = Tab:AddSection({
	Name = "Section1"
})

--[[
Name = <string> - The name of the section.
]]
OrionLib:MakeNotification({
	Name = "Script!",
	Content = "Made by kokko",
	Image = "rbxassetid://4483345998",
	Time = 9
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]
OrionLib:MakeNotification({
	Name = "UI!",
	Content = "credits to orion for the libary",
	Image = "rbxassetid://4483345998",
	Time = 10
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]
Tab:AddButton({
	Name = "Noclip/fly tool!",
	Callback = function()
      	local x = Instance.new("HopperBin")
x.Parent = game.Players.LocalPlayer.Backpack
x.BinType = "Script"
x.Name = "NoClip"

local c = workspace.CurrentCamera
local player = game.Players.LocalPlayer
local userInput = game:GetService("UserInputService")
local rs = game:GetService("RunService")
local starterPlayer = game:GetService("StarterPlayer")

local selected = false
local speed = 60
local lastUpdate = 0

function getNextMovement(deltaTime)
local nextMove = Vector3.new()
-- Left/Right
if userInput:IsKeyDown("A") or userInput:IsKeyDown("Left") then
nextMove = Vector3.new(-1,0,0)
elseif userInput:IsKeyDown("D") or userInput:IsKeyDown("Right") then
nextMove = Vector3.new(1,0,0)
end
-- Forward/Back
if userInput:IsKeyDown("W") or userInput:IsKeyDown("Up") then
nextMove = nextMove + Vector3.new(0,0,-1)
elseif userInput:IsKeyDown("S") or userInput:IsKeyDown("Down") then
nextMove = nextMove + Vector3.new(0,0,1)
end
-- Up/Down
if userInput:IsKeyDown("Space") then
nextMove = nextMove + Vector3.new(0,1,0)
elseif userInput:IsKeyDown("LeftControl") then
nextMove = nextMove + Vector3.new(0,-1,0)
end
return CFrame.new( nextMove * (speed * deltaTime) )
end

function onSelected()
local char = player.Character
if char then
local humanoid = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")
currentPos = root.Position
selected = true
root.Anchored = true
lastUpdate = tick()
humanoid.PlatformStand = true
while selected do
wait()
local delta = tick()-lastUpdate
local look = (c.Focus.p-c.CoordinateFrame.p).unit
local move = getNextMovement(delta)
local pos = root.Position
root.CFrame = CFrame.new(pos,pos+look) * move
lastUpdate = tick()
end
root.Anchored = false
root.Velocity = Vector3.new()
humanoid.PlatformStand = false
end
end

function onDeselected()
selected = false
end

x.Selected:connect(onSelected)
x.Deselected:connect(onDeselected)
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
Tab:AddButton({
	Name = "TP TOOL!",
	Callback = function()
   mouse = game.Players.LocalPlayer:GetMouse()
tool = Instance.new("Tool")
tool.RequiresHandle = false
tool.Name = "TP TOOL"
tool.Activated:connect(function()
local pos = mouse.Hit+Vector3.new(0,2.5,0)
pos = CFrame.new(pos.X,pos.Y,pos.Z)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
end)
tool.Parent = game.Players.LocalPlayer.Backpack
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
local Tab = Window:MakeTab({
	Name = "Character stuff",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

Tab:AddSlider({
	Name = "Speed Changer",
	Min = 16,
	Max = 1000,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed Power",
	Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]
Tab:AddSlider({
	Name = "Jump Changer",
	Min = 16,
	Max = 1000,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Jump Power",
	Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]
local Tab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Kokko hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]
local Tab = Window:MakeTab({
	Name = "Tools",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local Section = Tab:AddSection({
	Name = "Section1"
})

--[[
Name = <string> - The name of the section.
]]
OrionLib:MakeNotification({
	Name = "Script!",
	Content = "Made by kokko",
	Image = "rbxassetid://4483345998",
	Time = 9
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]
OrionLib:MakeNotification({
	Name = "UI!",
	Content = "credits to orion for the libary",
	Image = "rbxassetid://4483345998",
	Time = 10
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]
Tab:AddButton({
	Name = "Noclip/fly tool!",
	Callback = function()
      	local x = Instance.new("HopperBin")
x.Parent = game.Players.LocalPlayer.Backpack
x.BinType = "Script"
x.Name = "NoClip"

local c = workspace.CurrentCamera
local player = game.Players.LocalPlayer
local userInput = game:GetService("UserInputService")
local rs = game:GetService("RunService")
local starterPlayer = game:GetService("StarterPlayer")

local selected = false
local speed = 60
local lastUpdate = 0

function getNextMovement(deltaTime)
local nextMove = Vector3.new()
-- Left/Right
if userInput:IsKeyDown("A") or userInput:IsKeyDown("Left") then
nextMove = Vector3.new(-1,0,0)
elseif userInput:IsKeyDown("D") or userInput:IsKeyDown("Right") then
nextMove = Vector3.new(1,0,0)
end
-- Forward/Back
if userInput:IsKeyDown("W") or userInput:IsKeyDown("Up") then
nextMove = nextMove + Vector3.new(0,0,-1)
elseif userInput:IsKeyDown("S") or userInput:IsKeyDown("Down") then
nextMove = nextMove + Vector3.new(0,0,1)
end
-- Up/Down
if userInput:IsKeyDown("Space") then
nextMove = nextMove + Vector3.new(0,1,0)
elseif userInput:IsKeyDown("LeftControl") then
nextMove = nextMove + Vector3.new(0,-1,0)
end
return CFrame.new( nextMove * (speed * deltaTime) )
end

function onSelected()
local char = player.Character
if char then
local humanoid = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")
currentPos = root.Position
selected = true
root.Anchored = true
lastUpdate = tick()
humanoid.PlatformStand = true
while selected do
wait()
local delta = tick()-lastUpdate
local look = (c.Focus.p-c.CoordinateFrame.p).unit
local move = getNextMovement(delta)
local pos = root.Position
root.CFrame = CFrame.new(pos,pos+look) * move
lastUpdate = tick()
end
root.Anchored = false
root.Velocity = Vector3.new()
humanoid.PlatformStand = false
end
end

function onDeselected()
selected = false
end

x.Selected:connect(onSelected)
x.Deselected:connect(onDeselected)
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
Tab:AddButton({
	Name = "TP TOOL!",
	Callback = function()
   mouse = game.Players.LocalPlayer:GetMouse()
tool = Instance.new("Tool")
tool.RequiresHandle = false
tool.Name = "TP TOOL"
tool.Activated:connect(function()
local pos = mouse.Hit+Vector3.new(0,2.5,0)
pos = CFrame.new(pos.X,pos.Y,pos.Z)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
end)
tool.Parent = game.Players.LocalPlayer.Backpack
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
local Tab = Window:MakeTab({
	Name = "Character stuff",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

Tab:AddSlider({
	Name = "Speed Changer",
	Min = 16,
	Max = 1000,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed Power",
	Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]
Tab:AddSlider({
	Name = "Jump Changer",
	Min = 16,
	Max = 1000,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Jump Power",
	Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]
local Tab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
Tab:AddButton({
	Name = "TP GUI",
	Callback = function()
          -- TP GUI

local ATPGUI = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local Credits = Instance.new("TextLabel")
local TextButton = Instance.new("TextButton")
local TextBox = Instance.new("TextBox")

--Properties:

ATPGUI.Name = "ATPGUI"
ATPGUI.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ATPGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ATPGUI.ResetOnSpawn = false

MainFrame.Name = "MainFrame"
MainFrame.Parent = ATPGUI
MainFrame.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
MainFrame.BackgroundTransparency = 0.400
MainFrame.BorderSizePixel = 3
MainFrame.Position = UDim2.new(0.468553454, 0, 0.220064729, 0)
MainFrame.Size = UDim2.new(0, 130, 0, 60)

Credits.Name = "Credits"
Credits.Parent = MainFrame
Credits.BackgroundColor3 = Color3.fromRGB(85, 85, 127)
Credits.BackgroundTransparency = 0.400
Credits.Size = UDim2.new(0, 130, 0, 20)
Credits.Font = Enum.Font.SourceSansBold
Credits.Text = "TP GUI Made by Adamm#5598"
Credits.TextColor3 = Color3.fromRGB(0, 0, 0)
Credits.TextScaled = true
Credits.TextSize = 14.000
Credits.TextWrapped = true

TextButton.Parent = MainFrame
TextButton.BackgroundColor3 = Color3.fromRGB(170, 170, 255)
TextButton.Position = UDim2.new(0, 0, 0.333333343, 0)
TextButton.Size = UDim2.new(0, 130, 0, 20)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "Click to TP"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true

TextBox.Parent = TextButton
TextBox.BackgroundColor3 = Color3.fromRGB(170, 170, 127)
TextBox.Position = UDim2.new(0, 0, 0.966666698, 0)
TextBox.Size = UDim2.new(0, 130, 0, 20)
TextBox.Font = Enum.Font.SourceSans
TextBox.Text = "Player Name..."
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextScaled = true
TextBox.TextSize = 14.000
TextBox.TextWrapped = true

-- Scripts:

local function RFIR_fake_script() -- TextButton.LocalScript 
	local script = Instance.new('LocalScript', TextButton)

	function Clicked() 
		
		local pl = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
		local humanoid = game:GetService("Players").LocalPlayer.Character.Humanoid
		local pl2 = game:GetService("Players").LocalPlayer.PlayerGui.ATPGUI.MainFrame.TextButton.TextBox.Text
		
		humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		wait(0.1)
		pl.CFrame = game.Players[pl2].Character.HumanoidRootPart.CFrame
		
	end
	
	script.Parent.MouseButton1Click:connect(Clicked)
end
coroutine.wrap(RFIR_fake_script)()
local function EXYBPLM_fake_script() -- MainFrame.LocalScript 
	local script = Instance.new('LocalScript', MainFrame)

	local players = game:service('Players');
	local player = players.LocalPlayer;
	local mouse = player:GetMouse();
	local run = game:service('RunService');
	local stepped = run.Stepped;
	draggable = function(obj)
		spawn(function()
			obj.Active = true;
			local minitial;
			local initial;
			local isdragging;
			obj.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					isdragging = true;
					minitial = input.Position;
					initial = obj.Position;
					local con;
					con = stepped:Connect(function()
						if isdragging then
							local delta = Vector3.new(mouse.X, mouse.Y, 4000) - minitial;
							obj.Position = UDim2.new(initial.X.Scale, initial.X.Offset + delta.X, initial.Y.Scale, initial.Y.Offset + delta.Y);
						else
							con:Disconnect();
						end;
					end);
					input.Changed:Connect(function()
						if input.UserInputState == Enum.UserInputState.End then
							isdragging = false;
						end;
					end);
				end;
			end);
		end)
	end;
	
	draggable(script.Parent)
end
coroutine.wrap(EXYBPLM_fake_script)()

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
OrionLib:Init()
